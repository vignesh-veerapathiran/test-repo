name: Deploy to Local Minikube

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/my_docker_image:flask_ee1


  deploy-to-minikube:
    runs-on: self-hosted  # Runs on local machine
    needs: build-and-push
    steps:
      - name: Check if Minikube is Running
        run: |
          if minikube status | grep -q 'Running'; then
            echo "Minikube is already running."
          else
            echo "Starting Minikube..."
            minikube start --driver=docker
          fi

      - name: Pull Docker Image into Minikube
        run: minikube image pull ${{ secrets.DOCKER_USERNAME }}/my_docker_image:flask_ee1

      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f /Users/vigneshv/Documents/demo_git/test-repo/k9s/deployment.yaml
          kubectl apply -f /Users/vigneshv/Documents/demo_git/test-repo/k9s/service.yaml

      - name: Wait for Deployment to Be Ready
        run: kubectl rollout status deployment/flask-app

      - name: Run Minikube Tunnel in Background #test
        run: |
          nohup bash -c "minikube tunnel" > minikube-tunnel.log 2>&1 &
          sleep 10
          ps aux | grep minikube

      - name: Wait for External IP
        run: |
          echo "Waiting for LoadBalancer to get an external IP..."
          for i in {1..20}; do
            EXTERNAL_IP=$(kubectl get svc flask-app-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
            if [[ -n "$EXTERNAL_IP" ]]; then
              echo "APP_URL=http://$EXTERNAL_IP:8080" >> $GITHUB_ENV
              exit 0
            fi
            sleep 5
          done
          echo "Error: LoadBalancer did not get an external IP"
          exit 1

      - name: Test Service
        run: |
          curl -v "$APP_URL/health"