name: Deploy to Local Minikube

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: app/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/my_docker_image:flask_ee1


  deploy-to-minikube:
    runs-on: self-hosted  # Runs on local machine
    needs: build-and-push
    steps:
      - name: Check if Minikube is Running
        run: |
          if minikube status | grep -q 'Running'; then
            echo "Minikube is already running."
          else
            echo "Starting Minikube..."
            minikube start --driver=hyperkit
          fi

      - name: Enable Minikube Ingress Addon (if not enabled)
        run: |
          if minikube addons list | grep -E "^\| ingress[[:space:]]+\|" | grep "enabled"; then
            echo "Ingress addon is already enabled."
          else
            echo "Enabling Ingress addon..."
            minikube addons enable ingress
          fi

      - name: Pull Docker Image into Minikube
        run: minikube image pull ${{ secrets.DOCKER_USERNAME }}/my_docker_image:flask_ee1

      - name: Apply Kubernetes Manifests
        run: |
          kubectl get ns test-flask || kubectl create ns test-flask
          kubectl apply -f /Users/vigneshv/Documents/demo_git/test-repo/k9s/deployment.yaml
          kubectl apply -f /Users/vigneshv/Documents/demo_git/test-repo/k9s/service.yaml
          kubectl apply -f /Users/vigneshv/Documents/demo_git/test-repo/k9s/ingress.yaml

      - name: Wait for Deployment to Be Ready
        run: kubectl rollout status deployment/flask-app

      - name: Wait for Ingress to be Ready
        run: |
          sleep 10  # Wait for Ingress resources to be created
          for i in {1..20}; do
            INGRESS_HOST=$(kubectl get ingress flask-app-ingress -n test-flask -o jsonpath='{.spec.rules[0].host}' 2>/dev/null)
            if [[ -n "$INGRESS_HOST" ]]; then
              echo "APP_URL=http://$INGRESS_HOST" >> $GITHUB_ENV
              exit 0
            fi
            sleep 5
          done
          echo "Error: Ingress did not get a host"
          exit 1

      - name: Test Service via Ingress
        run: |
          curl -v "$APP_URL/health"